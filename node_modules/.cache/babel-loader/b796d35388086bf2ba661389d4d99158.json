{"ast":null,"code":"import { BaseMessageSignerWalletAdapter, WalletError, WalletReadyState } from '@solana/wallet-adapter-base';\nimport { PublicKey } from '@solana/web3.js';\nexport const WelldoneWalletName = 'Welldone';\nexport class WelldoneWalletAdapter extends BaseMessageSignerWalletAdapter {\n  constructor() {\n    super();\n    this.name = WelldoneWalletName;\n    this.url = 'https://welldonestudio.io';\n    this.icon = '';\n    this._dapp = null;\n    this._network = '';\n    this._connecting = void 0;\n    this._publicKey = void 0;\n    this._readyState = typeof window === 'undefined' || typeof document === 'undefined' ? WalletReadyState.Unsupported : WalletReadyState.NotDetected;\n    this._connecting = false;\n    this._dapp = null;\n    this._publicKey = null;\n  }\n\n  get publicKey() {\n    return this._publicKey;\n  }\n\n  get connecting() {\n    return this._connecting;\n  }\n\n  get connected() {\n    return !!this._dapp;\n  }\n\n  get readyState() {\n    return this._readyState;\n  }\n\n  async connect() {\n    try {\n      if (window && window.dapp) {\n        this._dapp = window.dapp;\n\n        this._dapp.on('chainChanged', this.updateNetwork.bind(this));\n\n        this._dapp.on('accountsChanged', this.updateAccount.bind(this));\n\n        this.init();\n      } else {\n        this._dapp = {\n          request: () => {\n            return {\n              error: {\n                data: {\n                  error_message: 'provider is not activated',\n                  error_type: 'unknown'\n                }\n              }\n            };\n          }\n        };\n      }\n    } catch (error) {\n      this.emit('error', error);\n      throw error;\n    } finally {\n      this._connecting = false;\n    }\n  }\n  /**\n   * init sdk\n   */\n\n\n  async init() {\n    if (this._dapp._networks && this._dapp._networks.solana) {\n      this._network = this._dapp._networks.solana.net.split(':')[1];\n\n      if (this._dapp._networks.solana.address) {\n        this._publicKey = new PublicKey(this._dapp._networks.solana.pubKey);\n        this.emit('connect', this._publicKey);\n      }\n    }\n  }\n  /**\n   * update selected chain id\n   */\n\n\n  updateNetwork(chainId) {\n    const parsed = chainId.split(':');\n\n    if (parsed[0] === 'near') {\n      this._network = parsed[1]; // this.emit('chainChanged', this._network);\n    }\n  }\n  /**\n   * update selected account\n   */\n\n\n  updateAccount(accounts) {\n    if (accounts.solana && accounts.solana.address) {\n      this._publicKey = new PublicKey(accounts.solana.pubKey);\n      this.emit('connect', this._publicKey);\n    }\n  }\n\n  async disconnect() {\n    this._dapp = null;\n    this.emit('disconnect');\n  }\n\n  async sendTransaction(transaction, connection, options) {\n    this.emit('error', new WalletError('sendTransaction is not support'));\n    throw new Error('sendTransaction is not support');\n  }\n\n  async signTransaction(transaction) {\n    this.emit('error', new WalletError('signTransaction is not support'));\n    throw new Error('signTransaction is not support');\n  }\n\n  async signAllTransactions(transactions) {\n    this.emit('error', new WalletError('signAllTransactions is not support'));\n    throw new Error('signAllTransactions is not support');\n  }\n\n  async signMessage(message) {\n    this.emit('error', new WalletError('signMessage is not support'));\n    throw new Error('signMessage is not support');\n  }\n\n  async signAndSendTransaction(transaction) {\n    try {\n      const response = await this._dapp.request({\n        net: `solana:${this._network}`,\n        method: 'dapp:sendTransaction',\n        params: [`0x${transaction.serialize({\n          verifySignatures: false\n        }).toString('hex')}`]\n      });\n\n      if (response.error) {\n        this.emit('error', new WalletError(response.error));\n        throw new Error(response.error);\n      }\n\n      return response;\n    } catch (error) {\n      this.emit('error', error);\n      throw error;\n    }\n  }\n\n}","map":{"version":3,"names":["BaseMessageSignerWalletAdapter","WalletError","WalletReadyState","PublicKey","WelldoneWalletName","WelldoneWalletAdapter","constructor","name","url","icon","_dapp","_network","_connecting","_publicKey","_readyState","window","document","Unsupported","NotDetected","publicKey","connecting","connected","readyState","connect","dapp","on","updateNetwork","bind","updateAccount","init","request","error","data","error_message","error_type","emit","_networks","solana","net","split","address","pubKey","chainId","parsed","accounts","disconnect","sendTransaction","transaction","connection","options","Error","signTransaction","signAllTransactions","transactions","signMessage","message","signAndSendTransaction","response","method","params","serialize","verifySignatures","toString"],"sources":["/Users/deepinthepowderblue/Documents/GitHub/testingWallet/web3-connect-phantom-wallet/src/welldone.ts"],"sourcesContent":["import {\n    BaseMessageSignerWalletAdapter,\n    SendTransactionOptions,\n    WalletError,\n    WalletName,\n    WalletReadyState,\n} from '@solana/wallet-adapter-base';\nimport { Connection, PublicKey, Transaction, TransactionSignature } from '@solana/web3.js';\n\nexport const WelldoneWalletName = 'Welldone' as WalletName<'Welldone'>;\n\nexport class WelldoneWalletAdapter extends BaseMessageSignerWalletAdapter {\n    name = WelldoneWalletName;\n    url = 'https://welldonestudio.io';\n    icon = '';\n\n    private _dapp: any = null;\n    private _network = '';\n\n    private _connecting: boolean;\n    private _publicKey: PublicKey | null;\n    private _readyState: WalletReadyState =\n        typeof window === 'undefined' || typeof document === 'undefined'\n            ? WalletReadyState.Unsupported\n            : WalletReadyState.NotDetected;\n\n    constructor() {\n        super();\n        this._connecting = false;\n        this._dapp = null;\n        this._publicKey = null;\n    }\n\n    get publicKey(): PublicKey | null {\n        return this._publicKey;\n    }\n\n    get connecting(): boolean {\n        return this._connecting;\n    }\n\n    get connected(): boolean {\n        return !!this._dapp;\n    }\n\n    get readyState(): WalletReadyState {\n        return this._readyState;\n    }\n\n    async connect(): Promise<void> {\n        try {\n            if (window && (window as any).dapp) {\n                this._dapp = (window as any).dapp;\n                this._dapp.on('chainChanged', this.updateNetwork.bind(this));\n                this._dapp.on('accountsChanged', this.updateAccount.bind(this));\n                this.init();\n            } else {\n                this._dapp = {\n                    request: () => {\n                        return {\n                            error: {\n                                data: {\n                                    error_message: 'provider is not activated',\n                                    error_type: 'unknown',\n                                }\n                            },\n                        };\n                    }\n                };\n            }\n        } catch (error: any) {\n            this.emit('error', error);\n            throw error;\n        } finally {\n            this._connecting = false;\n        }\n    }\n\n    /**\n     * init sdk\n     */\n     private async init() {\n         if (this._dapp._networks && this._dapp._networks.solana) {\n            this._network = this._dapp._networks.solana.net.split(':')[1];\n            if (this._dapp._networks.solana.address) {\n                this._publicKey = new PublicKey(this._dapp._networks.solana.pubKey);\n                this.emit('connect', this._publicKey);\n            }    \n         }        \n    }\n\n    /**\n     * update selected chain id\n     */\n        private updateNetwork(chainId: string) {\n        const parsed = chainId.split(':');\n        if (parsed[0] === 'near') {\n            this._network = parsed[1];\n            // this.emit('chainChanged', this._network);\n        }\n    }\n\n    /**\n     * update selected account\n     */\n    private updateAccount(accounts: {[key: string]: { address: string; pubKey: string}}) {\n        if (accounts.solana && accounts.solana.address) {\n            this._publicKey = new PublicKey(accounts.solana.pubKey);\n            this.emit('connect', this._publicKey);\n        }\n    }\n\n    async disconnect(): Promise<void> {\n        this._dapp = null;\n        this.emit('disconnect');\n    }\n\n    async sendTransaction(\n        transaction: Transaction,\n        connection: Connection,\n        options?: SendTransactionOptions\n    ): Promise<TransactionSignature> {\n        this.emit('error', new WalletError('sendTransaction is not support'));\n        throw new Error('sendTransaction is not support');\n    }\n\n    async signTransaction(transaction: Transaction): Promise<Transaction> {\n        this.emit('error', new WalletError('signTransaction is not support'));\n        throw new Error('signTransaction is not support');\n    }\n\n    async signAllTransactions(transactions: Transaction[]): Promise<Transaction[]> {\n        this.emit('error', new WalletError('signAllTransactions is not support'));\n        throw new Error('signAllTransactions is not support');\n    }\n\n    async signMessage(message: Uint8Array): Promise<Uint8Array> {\n        this.emit('error', new WalletError('signMessage is not support'));\n        throw new Error('signMessage is not support');\n    }\n\n    async signAndSendTransaction(transaction: Transaction) {\n        try {\n            const response = await this._dapp.request({\n                net: `solana:${this._network}`,\n                method: 'dapp:sendTransaction',\n                params: [`0x${transaction.serialize({verifySignatures: false}).toString('hex')}`]\n            });\n            if (response.error) {\n                this.emit('error', new WalletError(response.error));\n                throw new Error(response.error);    \n            }\n            return response;    \n        } catch (error: any) {\n            this.emit('error', error);\n            throw error;\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}