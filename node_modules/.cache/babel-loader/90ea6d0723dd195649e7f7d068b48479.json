{"ast":null,"code":"import { // BaseMessageSignerWalletAdapter,\n// WalletName,\nWalletReadyState } from '@solana/wallet-adapter-base';\nimport { PublicKey } from '@solana/web3.js'; // export const WelldoneWalletName = 'Welldone' as WalletName<'Welldone'>;\n\nexport class WelldoneWalletAdapter {\n  // name = WelldoneWalletName;\n  constructor() {\n    this.url = 'https://welldonestudio.io';\n    this.icon = '';\n    this._dapp = null;\n    this._network = '';\n    this._connecting = void 0;\n    this._publicKey = void 0;\n    this._readyState = typeof window === 'undefined' || typeof document === 'undefined' ? WalletReadyState.Unsupported : WalletReadyState.NotDetected;\n    // super();\n    this._connecting = false;\n    this._dapp = null;\n    this._publicKey = null;\n  }\n\n  get publicKey() {\n    return this._publicKey;\n  }\n\n  get connecting() {\n    return this._connecting;\n  }\n\n  get connected() {\n    return !!this._dapp;\n  }\n\n  get readyState() {\n    return this._readyState;\n  }\n\n  async connect() {\n    try {\n      if (window && window.dapp) {\n        this._dapp = window.dapp;\n\n        this._dapp.on('chainChanged', this.updateNetwork.bind(this));\n\n        this._dapp.on('accountsChanged', this.updateAccount.bind(this));\n\n        await this.init();\n      } else {\n        this._dapp = {\n          request: () => {\n            return {\n              error: {\n                data: {\n                  error_message: 'provider is not activated',\n                  error_type: 'unknown'\n                }\n              }\n            };\n          }\n        };\n      }\n    } catch (error) {\n      // this.emit('error', error);\n      throw error;\n    } finally {\n      this._connecting = false;\n    }\n  }\n  /**\n   * init sdk\n   */\n\n\n  async init() {\n    if (this._dapp._networks && this._dapp._networks.solana) {\n      this._network = this._dapp._networks.solana.net.split(':')[1];\n\n      if (this._dapp._networks.solana.address) {\n        this._publicKey = new PublicKey(this._dapp._networks.solana.pubKey); // this.emit('connect', this._publicKey);\n      }\n    }\n  }\n  /**\n   * update selected chain id\n   */\n\n\n  updateNetwork(chainId) {\n    const parsed = chainId.split(':');\n\n    if (parsed[0] === 'near') {\n      this._network = parsed[1]; // this.emit('chainChanged', this._network);\n    }\n  }\n  /**\n   * update selected account\n   */\n\n\n  updateAccount(accounts) {\n    if (accounts.solana && accounts.solana.address) {\n      this._publicKey = new PublicKey(accounts.solana.pubKey); // this.emit('connect', this._publicKey);\n    }\n  }\n\n  async disconnect() {\n    this._dapp = null; // this.emit('disconnect');\n  }\n\n  async sendTransaction(transaction, connection, options) {\n    // this.emit('error', new WalletError('sendTransaction is not support'));\n    throw new Error('sendTransaction is not support');\n  }\n\n  async signTransaction(transaction) {\n    // this.emit('error', new WalletError('signTransaction is not support'));\n    throw new Error('signTransaction is not support');\n  }\n\n  async signAllTransactions(transactions) {\n    // this.emit('error', new WalletError('signAllTransactions is not support'));\n    throw new Error('signAllTransactions is not support');\n  }\n\n  async signMessage(message) {\n    // this.emit('error', new WalletError('signMessage is not support'));\n    throw new Error('signMessage is not support');\n  }\n\n  async signAndSendTransaction(transaction) {\n    try {\n      console.log(JSON.stringify({\n        net: `solana:devnet`,\n        method: 'dapp:sendTransaction',\n        params: [`0x${transaction.serialize({\n          verifySignatures: false\n        }).toString('hex')}`]\n      }));\n      const response = await window.dapp.request({\n        net: `solana:${this._network}`,\n        method: 'dapp:sendTransaction',\n        params: [`0x${transaction.serialize({\n          verifySignatures: false\n        }).toString('hex')}`]\n      });\n\n      if (response.error) {\n        // this.emit('error', new WalletError(response.error));\n        throw new Error(response.error);\n      }\n\n      return response;\n    } catch (error) {\n      console.log(error); // this.emit('error', error);\n\n      throw error;\n    }\n  }\n\n}","map":{"version":3,"names":["WalletReadyState","PublicKey","WelldoneWalletAdapter","constructor","url","icon","_dapp","_network","_connecting","_publicKey","_readyState","window","document","Unsupported","NotDetected","publicKey","connecting","connected","readyState","connect","dapp","on","updateNetwork","bind","updateAccount","init","request","error","data","error_message","error_type","_networks","solana","net","split","address","pubKey","chainId","parsed","accounts","disconnect","sendTransaction","transaction","connection","options","Error","signTransaction","signAllTransactions","transactions","signMessage","message","signAndSendTransaction","console","log","JSON","stringify","method","params","serialize","verifySignatures","toString","response"],"sources":["/Users/deepinthepowderblue/Documents/GitHub/testingWallet/web3-connect-phantom-wallet/src/welldone.ts"],"sourcesContent":["import {\n    // BaseMessageSignerWalletAdapter,\n    SendTransactionOptions,\n    WalletError,\n    // WalletName,\n    WalletReadyState,\n} from '@solana/wallet-adapter-base';\nimport { Connection, PublicKey, Transaction, TransactionSignature } from '@solana/web3.js';\n\n// export const WelldoneWalletName = 'Welldone' as WalletName<'Welldone'>;\n\nexport class WelldoneWalletAdapter  {\n    // name = WelldoneWalletName;\n    url = 'https://welldonestudio.io';\n    icon = '';\n\n    private _dapp: any = null;\n    private _network = '';\n\n    private _connecting: boolean;\n    private _publicKey: PublicKey | null;\n    private _readyState: WalletReadyState =\n        typeof window === 'undefined' || typeof document === 'undefined'\n            ? WalletReadyState.Unsupported\n            : WalletReadyState.NotDetected;\n\n    constructor() {\n        // super();\n        this._connecting = false;\n        this._dapp = null;\n        this._publicKey = null;\n    }\n\n    get publicKey(): PublicKey | null {\n        return this._publicKey;\n    }\n\n    get connecting(): boolean {\n        return this._connecting;\n    }\n\n    get connected(): boolean {\n        return !!this._dapp;\n    }\n\n    get readyState(): WalletReadyState {\n        return this._readyState;\n    }\n\n    async connect(): Promise<void> {\n        try {\n            if (window && (window as any).dapp) {\n                this._dapp = (window as any).dapp;\n                this._dapp.on('chainChanged', this.updateNetwork.bind(this));\n                this._dapp.on('accountsChanged', this.updateAccount.bind(this));\n                await this.init();\n            } else {\n                this._dapp = {\n                    request: () => {\n                        return {\n                            error: {\n                                data: {\n                                    error_message: 'provider is not activated',\n                                    error_type: 'unknown',\n                                }\n                            },\n                        };\n                    }\n                };\n            }\n        } catch (error: any) {\n            // this.emit('error', error);\n            throw error;\n        } finally {\n            this._connecting = false;\n        }\n    }\n\n    /**\n     * init sdk\n     */\n     private async init() {\n         if (this._dapp._networks && this._dapp._networks.solana) {\n            this._network = this._dapp._networks.solana.net.split(':')[1];\n            if (this._dapp._networks.solana.address) {\n                this._publicKey = new PublicKey(this._dapp._networks.solana.pubKey);\n                // this.emit('connect', this._publicKey);\n            }    \n         }        \n    }\n\n    /**\n     * update selected chain id\n     */\n        private updateNetwork(chainId: string) {\n        const parsed = chainId.split(':');\n        if (parsed[0] === 'near') {\n            this._network = parsed[1];\n            // this.emit('chainChanged', this._network);\n        }\n    }\n\n    /**\n     * update selected account\n     */\n    private updateAccount(accounts: {[key: string]: { address: string; pubKey: string}}) {\n        if (accounts.solana && accounts.solana.address) {\n            this._publicKey = new PublicKey(accounts.solana.pubKey);\n            // this.emit('connect', this._publicKey);\n        }\n    }\n\n    async disconnect(): Promise<void> {\n        this._dapp = null;\n        // this.emit('disconnect');\n    }\n\n    async sendTransaction(\n        transaction: Transaction,\n        connection: Connection,\n        options?: SendTransactionOptions\n    ): Promise<TransactionSignature> {\n        // this.emit('error', new WalletError('sendTransaction is not support'));\n        throw new Error('sendTransaction is not support');\n    }\n\n    async signTransaction(transaction: Transaction): Promise<Transaction> {\n        // this.emit('error', new WalletError('signTransaction is not support'));\n        throw new Error('signTransaction is not support');\n    }\n\n    async signAllTransactions(transactions: Transaction[]): Promise<Transaction[]> {\n        // this.emit('error', new WalletError('signAllTransactions is not support'));\n        throw new Error('signAllTransactions is not support');\n    }\n\n    async signMessage(message: Uint8Array): Promise<Uint8Array> {\n        // this.emit('error', new WalletError('signMessage is not support'));\n        throw new Error('signMessage is not support');\n    }\n\n    async signAndSendTransaction(transaction: Transaction) {\n        try {\n            console.log(JSON.stringify({\n                net: `solana:devnet`,\n                method: 'dapp:sendTransaction',\n                params: [`0x${transaction.serialize({verifySignatures: false}).toString('hex')}`]\n            }))\n            const response = await (window as any).dapp.request({\n                net: `solana:${this._network}`,\n                method: 'dapp:sendTransaction',\n                params: [`0x${transaction.serialize({verifySignatures: false}).toString('hex')}`]\n            });\n            if (response.error) {\n                // this.emit('error', new WalletError(response.error));\n                throw new Error(response.error);    \n            }\n            return response;    \n        } catch (error: any) {\n            console.log(error)\n            // this.emit('error', error);\n            throw error;\n        }\n    }\n}\n"],"mappings":"AAAA,SACI;AAGA;AACAA,gBALJ,QAMO,6BANP;AAOA,SAAqBC,SAArB,QAAyE,iBAAzE,C,CAEA;;AAEA,OAAO,MAAMC,qBAAN,CAA6B;EAChC;EAcAC,WAAW,GAAG;IAAA,KAbdC,GAac,GAbR,2BAaQ;IAAA,KAZdC,IAYc,GAZP,EAYO;IAAA,KAVNC,KAUM,GAVO,IAUP;IAAA,KATNC,QASM,GATK,EASL;IAAA,KAPNC,WAOM;IAAA,KANNC,UAMM;IAAA,KALNC,WAKM,GAJV,OAAOC,MAAP,KAAkB,WAAlB,IAAiC,OAAOC,QAAP,KAAoB,WAArD,GACMZ,gBAAgB,CAACa,WADvB,GAEMb,gBAAgB,CAACc,WAEb;IACV;IACA,KAAKN,WAAL,GAAmB,KAAnB;IACA,KAAKF,KAAL,GAAa,IAAb;IACA,KAAKG,UAAL,GAAkB,IAAlB;EACH;;EAEY,IAATM,SAAS,GAAqB;IAC9B,OAAO,KAAKN,UAAZ;EACH;;EAEa,IAAVO,UAAU,GAAY;IACtB,OAAO,KAAKR,WAAZ;EACH;;EAEY,IAATS,SAAS,GAAY;IACrB,OAAO,CAAC,CAAC,KAAKX,KAAd;EACH;;EAEa,IAAVY,UAAU,GAAqB;IAC/B,OAAO,KAAKR,WAAZ;EACH;;EAEY,MAAPS,OAAO,GAAkB;IAC3B,IAAI;MACA,IAAIR,MAAM,IAAKA,MAAD,CAAgBS,IAA9B,EAAoC;QAChC,KAAKd,KAAL,GAAcK,MAAD,CAAgBS,IAA7B;;QACA,KAAKd,KAAL,CAAWe,EAAX,CAAc,cAAd,EAA8B,KAAKC,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAA9B;;QACA,KAAKjB,KAAL,CAAWe,EAAX,CAAc,iBAAd,EAAiC,KAAKG,aAAL,CAAmBD,IAAnB,CAAwB,IAAxB,CAAjC;;QACA,MAAM,KAAKE,IAAL,EAAN;MACH,CALD,MAKO;QACH,KAAKnB,KAAL,GAAa;UACToB,OAAO,EAAE,MAAM;YACX,OAAO;cACHC,KAAK,EAAE;gBACHC,IAAI,EAAE;kBACFC,aAAa,EAAE,2BADb;kBAEFC,UAAU,EAAE;gBAFV;cADH;YADJ,CAAP;UAQH;QAVQ,CAAb;MAYH;IACJ,CApBD,CAoBE,OAAOH,KAAP,EAAmB;MACjB;MACA,MAAMA,KAAN;IACH,CAvBD,SAuBU;MACN,KAAKnB,WAAL,GAAmB,KAAnB;IACH;EACJ;EAED;AACJ;AACA;;;EACuB,MAAJiB,IAAI,GAAG;IACjB,IAAI,KAAKnB,KAAL,CAAWyB,SAAX,IAAwB,KAAKzB,KAAL,CAAWyB,SAAX,CAAqBC,MAAjD,EAAyD;MACtD,KAAKzB,QAAL,GAAgB,KAAKD,KAAL,CAAWyB,SAAX,CAAqBC,MAArB,CAA4BC,GAA5B,CAAgCC,KAAhC,CAAsC,GAAtC,EAA2C,CAA3C,CAAhB;;MACA,IAAI,KAAK5B,KAAL,CAAWyB,SAAX,CAAqBC,MAArB,CAA4BG,OAAhC,EAAyC;QACrC,KAAK1B,UAAL,GAAkB,IAAIR,SAAJ,CAAc,KAAKK,KAAL,CAAWyB,SAAX,CAAqBC,MAArB,CAA4BI,MAA1C,CAAlB,CADqC,CAErC;MACH;IACH;EACL;EAED;AACJ;AACA;;;EACgBd,aAAa,CAACe,OAAD,EAAkB;IACvC,MAAMC,MAAM,GAAGD,OAAO,CAACH,KAAR,CAAc,GAAd,CAAf;;IACA,IAAII,MAAM,CAAC,CAAD,CAAN,KAAc,MAAlB,EAA0B;MACtB,KAAK/B,QAAL,GAAgB+B,MAAM,CAAC,CAAD,CAAtB,CADsB,CAEtB;IACH;EACJ;EAED;AACJ;AACA;;;EACYd,aAAa,CAACe,QAAD,EAAgE;IACjF,IAAIA,QAAQ,CAACP,MAAT,IAAmBO,QAAQ,CAACP,MAAT,CAAgBG,OAAvC,EAAgD;MAC5C,KAAK1B,UAAL,GAAkB,IAAIR,SAAJ,CAAcsC,QAAQ,CAACP,MAAT,CAAgBI,MAA9B,CAAlB,CAD4C,CAE5C;IACH;EACJ;;EAEe,MAAVI,UAAU,GAAkB;IAC9B,KAAKlC,KAAL,GAAa,IAAb,CAD8B,CAE9B;EACH;;EAEoB,MAAfmC,eAAe,CACjBC,WADiB,EAEjBC,UAFiB,EAGjBC,OAHiB,EAIY;IAC7B;IACA,MAAM,IAAIC,KAAJ,CAAU,gCAAV,CAAN;EACH;;EAEoB,MAAfC,eAAe,CAACJ,WAAD,EAAiD;IAClE;IACA,MAAM,IAAIG,KAAJ,CAAU,gCAAV,CAAN;EACH;;EAEwB,MAAnBE,mBAAmB,CAACC,YAAD,EAAsD;IAC3E;IACA,MAAM,IAAIH,KAAJ,CAAU,oCAAV,CAAN;EACH;;EAEgB,MAAXI,WAAW,CAACC,OAAD,EAA2C;IACxD;IACA,MAAM,IAAIL,KAAJ,CAAU,4BAAV,CAAN;EACH;;EAE2B,MAAtBM,sBAAsB,CAACT,WAAD,EAA2B;IACnD,IAAI;MACAU,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,SAAL,CAAe;QACvBtB,GAAG,EAAG,eADiB;QAEvBuB,MAAM,EAAE,sBAFe;QAGvBC,MAAM,EAAE,CAAE,KAAIf,WAAW,CAACgB,SAAZ,CAAsB;UAACC,gBAAgB,EAAE;QAAnB,CAAtB,EAAiDC,QAAjD,CAA0D,KAA1D,CAAiE,EAAvE;MAHe,CAAf,CAAZ;MAKA,MAAMC,QAAQ,GAAG,MAAOlD,MAAD,CAAgBS,IAAhB,CAAqBM,OAArB,CAA6B;QAChDO,GAAG,EAAG,UAAS,KAAK1B,QAAS,EADmB;QAEhDiD,MAAM,EAAE,sBAFwC;QAGhDC,MAAM,EAAE,CAAE,KAAIf,WAAW,CAACgB,SAAZ,CAAsB;UAACC,gBAAgB,EAAE;QAAnB,CAAtB,EAAiDC,QAAjD,CAA0D,KAA1D,CAAiE,EAAvE;MAHwC,CAA7B,CAAvB;;MAKA,IAAIC,QAAQ,CAAClC,KAAb,EAAoB;QAChB;QACA,MAAM,IAAIkB,KAAJ,CAAUgB,QAAQ,CAAClC,KAAnB,CAAN;MACH;;MACD,OAAOkC,QAAP;IACH,CAhBD,CAgBE,OAAOlC,KAAP,EAAmB;MACjByB,OAAO,CAACC,GAAR,CAAY1B,KAAZ,EADiB,CAEjB;;MACA,MAAMA,KAAN;IACH;EACJ;;AAxJ+B"},"metadata":{},"sourceType":"module"}