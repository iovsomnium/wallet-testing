{"ast":null,"code":"import { BaseWalletAdapter } from './adapter.mjs';\nimport { WalletError, WalletSendTransactionError } from './errors.mjs';\nexport class BaseSignerWalletAdapter extends BaseWalletAdapter {\n  async sendTransaction(transaction, connection) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let emit = true;\n\n    try {\n      try {\n        transaction.feePayer = transaction.feePayer || this.publicKey || undefined;\n        transaction.recentBlockhash = transaction.recentBlockhash || (await connection.getRecentBlockhash('finalized')).blockhash;\n        const {\n          signers,\n          ...sendOptions\n        } = options;\n        (signers === null || signers === void 0 ? void 0 : signers.length) && transaction.partialSign(...signers);\n        transaction = await this.signTransaction(transaction);\n        const rawTransaction = transaction.serialize();\n        return await connection.sendRawTransaction(rawTransaction, sendOptions);\n      } catch (error) {\n        // If the error was thrown by `signTransaction`, rethrow it and don't emit a duplicate event\n        if (error instanceof WalletError) {\n          emit = false;\n          throw error;\n        }\n\n        throw new WalletSendTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\n      }\n    } catch (error) {\n      if (emit) {\n        this.emit('error', error);\n      }\n\n      throw error;\n    }\n  }\n\n}\nexport class BaseMessageSignerWalletAdapter extends BaseSignerWalletAdapter {}","map":{"version":3,"mappings":"AACA,SAASA,iBAAT,QAAyE,eAAzE;AACA,SAASC,WAAT,EAAsBC,0BAAtB,QAAwD,cAAxD;AASA,OAAM,MAAgBC,uBAAhB,SAAgDH,iBAAhD,CAAiE;EAC9C,MAAfI,eAAe,CACjBC,WADiB,EAEjBC,UAFiB,EAGmB;IAAA,IAApCC,OAAoC,uEAAF,EAAE;IAEpC,IAAIC,IAAI,GAAG,IAAX;;IACA,IAAI;MACA,IAAI;QACAH,WAAW,CAACI,QAAZ,GAAuBJ,WAAW,CAACI,QAAZ,IAAwB,KAAKC,SAA7B,IAA0CC,SAAjE;QACAN,WAAW,CAACO,eAAZ,GACIP,WAAW,CAACO,eAAZ,IAA+B,CAAC,MAAMN,UAAU,CAACO,kBAAX,CAA8B,WAA9B,CAAP,EAAmDC,SADtF;QAGA,MAAM;UAAEC,OAAF;UAAW,GAAGC;QAAd,IAA8BT,OAApC;QAEA,QAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEU,MAAT,KAAmBZ,WAAW,CAACa,WAAZ,CAAwB,GAAGH,OAA3B,CAAnB;QAEAV,WAAW,GAAG,MAAM,KAAKc,eAAL,CAAqBd,WAArB,CAApB;QAEA,MAAMe,cAAc,GAAGf,WAAW,CAACgB,SAAZ,EAAvB;QAEA,OAAO,MAAMf,UAAU,CAACgB,kBAAX,CAA8BF,cAA9B,EAA8CJ,WAA9C,CAAb;MACH,CAdD,CAcE,OAAOO,KAAP,EAAmB;QACjB;QACA,IAAIA,KAAK,YAAYtB,WAArB,EAAkC;UAC9BO,IAAI,GAAG,KAAP;UACA,MAAMe,KAAN;QACH;;QACD,MAAM,IAAIrB,0BAAJ,CAA+BqB,KAAK,SAAL,SAAK,WAAL,GAAK,MAAL,QAAK,CAAEC,OAAtC,EAA+CD,KAA/C,CAAN;MACH;IACJ,CAvBD,CAuBE,OAAOA,KAAP,EAAmB;MACjB,IAAIf,IAAJ,EAAU;QACN,KAAKA,IAAL,CAAU,OAAV,EAAmBe,KAAnB;MACH;;MACD,MAAMA,KAAN;IACH;EACJ;;AApCkE;AAgDvE,OAAM,MAAgBE,8BAAhB,SACMtB,uBADN,CAC6B","names":["BaseWalletAdapter","WalletError","WalletSendTransactionError","BaseSignerWalletAdapter","sendTransaction","transaction","connection","options","emit","feePayer","publicKey","undefined","recentBlockhash","getRecentBlockhash","blockhash","signers","sendOptions","length","partialSign","signTransaction","rawTransaction","serialize","sendRawTransaction","error","message","BaseMessageSignerWalletAdapter"],"sources":["/Users/deepinthepowderblue/Documents/GitHub/testingWallet/node_modules/@solana/wallet-adapter-base/src/signer.ts"],"sourcesContent":["import { Connection, Transaction, TransactionSignature } from '@solana/web3.js';\nimport { BaseWalletAdapter, SendTransactionOptions, WalletAdapter } from './adapter';\nimport { WalletError, WalletSendTransactionError } from './errors';\n\nexport interface SignerWalletAdapterProps {\n    signTransaction(transaction: Transaction): Promise<Transaction>;\n    signAllTransactions(transaction: Transaction[]): Promise<Transaction[]>;\n}\n\nexport type SignerWalletAdapter = WalletAdapter & SignerWalletAdapterProps;\n\nexport abstract class BaseSignerWalletAdapter extends BaseWalletAdapter implements SignerWalletAdapter {\n    async sendTransaction(\n        transaction: Transaction,\n        connection: Connection,\n        options: SendTransactionOptions = {}\n    ): Promise<TransactionSignature> {\n        let emit = true;\n        try {\n            try {\n                transaction.feePayer = transaction.feePayer || this.publicKey || undefined;\n                transaction.recentBlockhash =\n                    transaction.recentBlockhash || (await connection.getRecentBlockhash('finalized')).blockhash;\n\n                const { signers, ...sendOptions } = options;\n\n                signers?.length && transaction.partialSign(...signers);\n\n                transaction = await this.signTransaction(transaction);\n\n                const rawTransaction = transaction.serialize();\n\n                return await connection.sendRawTransaction(rawTransaction, sendOptions);\n            } catch (error: any) {\n                // If the error was thrown by `signTransaction`, rethrow it and don't emit a duplicate event\n                if (error instanceof WalletError) {\n                    emit = false;\n                    throw error;\n                }\n                throw new WalletSendTransactionError(error?.message, error);\n            }\n        } catch (error: any) {\n            if (emit) {\n                this.emit('error', error);\n            }\n            throw error;\n        }\n    }\n\n    abstract signTransaction(transaction: Transaction): Promise<Transaction>;\n    abstract signAllTransactions(transaction: Transaction[]): Promise<Transaction[]>;\n}\n\nexport interface MessageSignerWalletAdapterProps {\n    signMessage(message: Uint8Array): Promise<Uint8Array>;\n}\n\nexport type MessageSignerWalletAdapter = WalletAdapter & MessageSignerWalletAdapterProps;\n\nexport abstract class BaseMessageSignerWalletAdapter\n    extends BaseSignerWalletAdapter\n    implements MessageSignerWalletAdapter\n{\n    abstract signMessage(message: Uint8Array): Promise<Uint8Array>;\n}\n"]},"metadata":{},"sourceType":"module"}