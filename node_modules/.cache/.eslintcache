[{"/Users/deepinthepowderblue/Documents/GitHub/testingWallet/src/index.tsx":"1","/Users/deepinthepowderblue/Documents/GitHub/testingWallet/src/reportWebVitals.ts":"2","/Users/deepinthepowderblue/Documents/GitHub/testingWallet/src/App.tsx":"3","/Users/deepinthepowderblue/Documents/GitHub/testingWallet/src/welldone.ts":"4","/Users/deepinthepowderblue/Documents/GitHub/wallet-testing/src/index.tsx":"5","/Users/deepinthepowderblue/Documents/GitHub/wallet-testing/src/reportWebVitals.ts":"6","/Users/deepinthepowderblue/Documents/GitHub/wallet-testing/src/App.tsx":"7","/Users/deepinthepowderblue/Documents/GitHub/wallet-testing/src/welldone.ts":"8"},{"size":554,"mtime":1655258088365,"results":"9","hashOfConfig":"10"},{"size":425,"mtime":1655258088365,"results":"11","hashOfConfig":"10"},{"size":11923,"mtime":1662378479703,"results":"12","hashOfConfig":"10"},{"size":5358,"mtime":1655265868299,"results":"13","hashOfConfig":"10"},{"size":554,"mtime":1655258088365,"results":"14","hashOfConfig":"15"},{"size":425,"mtime":1655258088365,"results":"16","hashOfConfig":"15"},{"size":11923,"mtime":1662378479703,"results":"17","hashOfConfig":"15"},{"size":5358,"mtime":1655265868299,"results":"18","hashOfConfig":"15"},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"z49jgu",{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"og5iji",{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/deepinthepowderblue/Documents/GitHub/testingWallet/src/index.tsx",[],[],[],"/Users/deepinthepowderblue/Documents/GitHub/testingWallet/src/reportWebVitals.ts",[],[],"/Users/deepinthepowderblue/Documents/GitHub/testingWallet/src/App.tsx",[],[],"/Users/deepinthepowderblue/Documents/GitHub/testingWallet/src/welldone.ts",["45"],[],"import {\n    // BaseMessageSignerWalletAdapter,\n    SendTransactionOptions,\n    WalletError,\n    // WalletName,\n    WalletReadyState,\n} from '@solana/wallet-adapter-base';\nimport { Connection, PublicKey, Transaction, TransactionSignature } from '@solana/web3.js';\n\n// export const WelldoneWalletName = 'Welldone' as WalletName<'Welldone'>;\n\nexport class WelldoneWalletAdapter  {\n    // name = WelldoneWalletName;\n    url = 'https://welldonestudio.io';\n    icon = '';\n\n    private _dapp: any = null;\n    private _network = '';\n\n    private _connecting: boolean;\n    private _publicKey: PublicKey | null;\n    private _readyState: WalletReadyState =\n        typeof window === 'undefined' || typeof document === 'undefined'\n            ? WalletReadyState.Unsupported\n            : WalletReadyState.NotDetected;\n\n    constructor() {\n        // super();\n        this._connecting = false;\n        this._dapp = null;\n        this._publicKey = null;\n    }\n\n    get publicKey(): PublicKey | null {\n        return this._publicKey;\n    }\n\n    get connecting(): boolean {\n        return this._connecting;\n    }\n\n    get connected(): boolean {\n        return !!this._dapp;\n    }\n\n    get readyState(): WalletReadyState {\n        return this._readyState;\n    }\n\n    async connect(): Promise<void> {\n        try {\n            if (window && (window as any).dapp) {\n                this._dapp = (window as any).dapp;\n                this._dapp.on('chainChanged', this.updateNetwork.bind(this));\n                this._dapp.on('accountsChanged', this.updateAccount.bind(this));\n                await this.init();\n            } else {\n                this._dapp = {\n                    request: () => {\n                        return {\n                            error: {\n                                data: {\n                                    error_message: 'provider is not activated',\n                                    error_type: 'unknown',\n                                }\n                            },\n                        };\n                    }\n                };\n            }\n        } catch (error: any) {\n            // this.emit('error', error);\n            throw error;\n        } finally {\n            this._connecting = false;\n        }\n    }\n\n    /**\n     * init sdk\n     */\n     private async init() {\n         if (this._dapp._networks && this._dapp._networks.solana) {\n            this._network = this._dapp._networks.solana.net.split(':')[1];\n            if (this._dapp._networks.solana.address) {\n                this._publicKey = new PublicKey(this._dapp._networks.solana.pubKey);\n                // this.emit('connect', this._publicKey);\n            }    \n         }        \n    }\n\n    /**\n     * update selected chain id\n     */\n        private updateNetwork(chainId: string) {\n        const parsed = chainId.split(':');\n        if (parsed[0] === 'near') {\n            this._network = parsed[1];\n            // this.emit('chainChanged', this._network);\n        }\n    }\n\n    /**\n     * update selected account\n     */\n    private updateAccount(accounts: {[key: string]: { address: string; pubKey: string}}) {\n        if (accounts.solana && accounts.solana.address) {\n            this._publicKey = new PublicKey(accounts.solana.pubKey);\n            // this.emit('connect', this._publicKey);\n        }\n    }\n\n    async disconnect(): Promise<void> {\n        this._dapp = null;\n        // this.emit('disconnect');\n    }\n\n    async sendTransaction(\n        transaction: Transaction,\n        connection: Connection,\n        options?: SendTransactionOptions\n    ): Promise<TransactionSignature> {\n        // this.emit('error', new WalletError('sendTransaction is not support'));\n        throw new Error('sendTransaction is not support');\n    }\n\n    async signTransaction(transaction: Transaction): Promise<Transaction> {\n        // this.emit('error', new WalletError('signTransaction is not support'));\n        throw new Error('signTransaction is not support');\n    }\n\n    async signAllTransactions(transactions: Transaction[]): Promise<Transaction[]> {\n        // this.emit('error', new WalletError('signAllTransactions is not support'));\n        throw new Error('signAllTransactions is not support');\n    }\n\n    async signMessage(message: Uint8Array): Promise<Uint8Array> {\n        // this.emit('error', new WalletError('signMessage is not support'));\n        throw new Error('signMessage is not support');\n    }\n\n    async signAndSendTransaction(transaction: Transaction) {\n        try {\n            console.log(JSON.stringify({\n                net: `solana:devnet`,\n                method: 'dapp:sendTransaction',\n                params: [`0x${transaction.serialize({verifySignatures: false}).toString('hex')}`]\n            }))\n            const response = await (window as any).dapp.request({\n                net: `solana:devnet`,\n                method: 'dapp:sendTransaction',\n                params: [`0x${transaction.serialize({verifySignatures: false}).toString('hex')}`]\n            });\n            if (response.error) {\n                // this.emit('error', new WalletError(response.error));\n                throw new Error(response.error);    \n            }\n            return response;    \n        } catch (error: any) {\n            console.log(error)\n            // this.emit('error', error);\n            throw error;\n        }\n    }\n}\n","/Users/deepinthepowderblue/Documents/GitHub/wallet-testing/src/index.tsx",[],[],"/Users/deepinthepowderblue/Documents/GitHub/wallet-testing/src/reportWebVitals.ts",[],[],"/Users/deepinthepowderblue/Documents/GitHub/wallet-testing/src/App.tsx",[],[],"/Users/deepinthepowderblue/Documents/GitHub/wallet-testing/src/welldone.ts",["46"],[],{"ruleId":"47","severity":1,"message":"48","line":4,"column":5,"nodeType":"49","messageId":"50","endLine":4,"endColumn":16},{"ruleId":"47","severity":1,"message":"48","line":4,"column":5,"nodeType":"49","messageId":"50","endLine":4,"endColumn":16},"@typescript-eslint/no-unused-vars","'WalletError' is defined but never used.","Identifier","unusedVar"]